class Pair{
    int x;
    int y;
    int z;
    Pair(int x,int y, int z){
        this.x=x;
        this.y=y;
        this.z=z;
    }
}

class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n=mat.length;
        int m=mat[0].length;
        int[][] vis= new int[n][m];
        int[][] ans=new int[n][m];
        Queue<Pair> q = new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    q.add(new Pair(i,j,0)); // storing the positions of 0 and then we will calculate dist of 1 from it
                    vis[i][j]=1;  // so that we do not have to visit them, as no point in calculating dist of two 0s
                }
            }
        }
        int delrow[] = {-1, 0, 1, 0}; 
	    int delcol[] = {0, 1, 0, -1}; 

        while(!q.isEmpty()){
            Pair p=q.remove();
            int row=p.x;
            int col=p.y;
            int dist=p.z;
            ans[row][col]=dist;
            for(int i=0;i<4;i++){
                int r = row+delrow[i];
                int c = col+delcol[i];

                if(r>=0 && r<n && c>=0 && c<m  && vis[r][c]==0){
                    vis[r][c]=1;
                    q.add(new Pair(r,c,dist+1)); // keep storing distance of 1, as all 0s are already marked visited
                }                                // this saved a lot of time 
            }

        }
        return ans;
    }
}
