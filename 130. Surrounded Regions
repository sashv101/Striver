class Solution {
    public void dfs(int i, int j, char[][] mat, boolean[][] vis, int m, int n){
        vis[i][j]=true;
        int delRow[] = {-1, 0, 1, 0};
        int delCol[] = {0, 1, 0, -1};

        for(int k=0;k<4;k++){
            int nrow= i+delRow[k];
            int ncol= j+delCol[k];

            if(nrow>=0 && nrow<m && ncol>=0 && ncol<n && vis[nrow][ncol]==false && mat[nrow][ncol]=='O'){
                dfs(nrow,ncol,mat,vis,m,n);
            }
        }
    }
    public void solve(char[][] board) {
        int m= board.length;
        int n= board[0].length;
        boolean[][] vis = new boolean[m][n];

        // traversing boundaries
        for(int i=0;i<m;i++){
            if(board[i][0]=='O' && !vis[i][0]){
                dfs(i,0,board,vis,m,n);
            }
            if(board[i][n-1]=='O' && !vis[i][n-1]){
                dfs(i,n-1,board,vis,m,n);
            }
        }

        for(int i=0;i<n;i++){
            if(board[0][i]=='O' && !vis[0][i]){
                dfs(0,i,board,vis,m,n);
            }

            if(board[m-1][i]=='O' && !vis[m-1][i]){
                dfs(m-1,i,board,vis,m,n);
            }
        }

        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                if(!vis[i][j] && board[i][j]=='O'){
                    board[i][j]='X';
                }
            }
        }

       // return board;
    }
}
