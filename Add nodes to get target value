  class Solution {
    List<Integer> ans=new ArrayList<Integer>();
    public void inorder(TreeNode root, List<Integer> arr){
        if(root==null){
            return;
        }
        inorder(root.left,arr);
        arr.add(root.val);
        inorder(root.right,arr);
    }
    public boolean findTarget(TreeNode root, int k) {
        inorder(root,ans);
        int n=ans.size();
        int i=0;
        int j=n-1;
        while(i<j){
            if((ans.get(i)+ans.get(j))==k){
                return true;
            }
            else if((ans.get(i)+ans.get(j))>k){
                j--;
            }
            else{
                i++;
            }
        }
        return false;
    }
}
___________________________________________________________________________________________________________________________________

More Effectie ve Solution

    Set<Integer> res = new HashSet<>();
public boolean findTarget(TreeNode root, int k) {
    if(root==null)
        return false;
    if(res.contains(k-root.val))
        return true;
    res.add(root.val);
    return findTarget(root.left,k) || findTarget(root.right,k);
